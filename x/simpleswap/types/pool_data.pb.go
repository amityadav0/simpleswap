// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: simpleswap/simpleswap/pool_data.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type PoolData struct {
	PoolId      string               `protobuf:"bytes,1,opt,name=poolId,proto3" json:"poolId,omitempty"`
	PoolParams  PoolParams           `protobuf:"bytes,3,opt,name=poolParams,proto3" json:"poolParams"`
	Assets      map[string]PoolAsset `protobuf:"bytes,4,rep,name=assets,proto3" json:"assets" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	TotalShares types.Coin           `protobuf:"bytes,5,opt,name=total_shares,json=totalShares,proto3" json:"total_shares" yaml:"total_shares"`
}

func (m *PoolData) Reset()         { *m = PoolData{} }
func (m *PoolData) String() string { return proto.CompactTextString(m) }
func (*PoolData) ProtoMessage()    {}
func (*PoolData) Descriptor() ([]byte, []int) {
	return fileDescriptor_4d9c1ac0838a3691, []int{0}
}
func (m *PoolData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PoolData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PoolData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PoolData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PoolData.Merge(m, src)
}
func (m *PoolData) XXX_Size() int {
	return m.Size()
}
func (m *PoolData) XXX_DiscardUnknown() {
	xxx_messageInfo_PoolData.DiscardUnknown(m)
}

var xxx_messageInfo_PoolData proto.InternalMessageInfo

func (m *PoolData) GetPoolId() string {
	if m != nil {
		return m.PoolId
	}
	return ""
}

func (m *PoolData) GetPoolParams() PoolParams {
	if m != nil {
		return m.PoolParams
	}
	return PoolParams{}
}

func (m *PoolData) GetAssets() map[string]PoolAsset {
	if m != nil {
		return m.Assets
	}
	return nil
}

func (m *PoolData) GetTotalShares() types.Coin {
	if m != nil {
		return m.TotalShares
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*PoolData)(nil), "simpleswap.simpleswap.PoolData")
	proto.RegisterMapType((map[string]PoolAsset)(nil), "simpleswap.simpleswap.PoolData.AssetsEntry")
}

func init() {
	proto.RegisterFile("simpleswap/simpleswap/pool_data.proto", fileDescriptor_4d9c1ac0838a3691)
}

var fileDescriptor_4d9c1ac0838a3691 = []byte{
	// 362 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x51, 0x4d, 0x4b, 0xc3, 0x40,
	0x10, 0x4d, 0xfa, 0x85, 0x6e, 0x3c, 0x48, 0xfc, 0x20, 0x56, 0x4c, 0x63, 0x41, 0x2d, 0x08, 0x1b,
	0x5a, 0x41, 0xa5, 0x37, 0xab, 0x22, 0xbd, 0x95, 0x78, 0x52, 0x0f, 0x65, 0xda, 0x2e, 0xb5, 0x98,
	0x74, 0x43, 0x76, 0xad, 0xe6, 0x5f, 0xf8, 0xb3, 0x7a, 0xec, 0xd1, 0x53, 0x91, 0xf6, 0xee, 0xc1,
	0x5f, 0x20, 0xbb, 0x59, 0x6c, 0x0e, 0x92, 0xdb, 0x9b, 0xdd, 0xf7, 0xde, 0xcc, 0xbc, 0x41, 0x47,
	0x6c, 0x14, 0x84, 0x3e, 0x61, 0x6f, 0x10, 0xba, 0x29, 0x18, 0x52, 0xea, 0x77, 0x07, 0xc0, 0x01,
	0x87, 0x11, 0xe5, 0xd4, 0xdc, 0x59, 0xfd, 0xe1, 0x15, 0x2c, 0xdb, 0x7d, 0xca, 0x02, 0xca, 0xdc,
	0x1e, 0x30, 0xe2, 0x4e, 0xea, 0x3d, 0xc2, 0xa1, 0xee, 0xf6, 0xe9, 0x68, 0x9c, 0xc8, 0xca, 0xdb,
	0x43, 0x3a, 0xa4, 0x12, 0xba, 0x02, 0xa9, 0xd7, 0xe3, 0x8c, 0x9e, 0xc0, 0x18, 0xe1, 0x8a, 0x77,
	0x92, 0xc1, 0x0b, 0x21, 0x82, 0x80, 0x25, 0xc4, 0xea, 0x77, 0x0e, 0xad, 0x75, 0x28, 0xf5, 0x6f,
	0x80, 0x83, 0xb9, 0x8b, 0x4a, 0x82, 0xd1, 0x1e, 0x58, 0xba, 0xa3, 0xd7, 0xd6, 0x3d, 0x55, 0x99,
	0x77, 0x08, 0x09, 0xd4, 0x91, 0x42, 0x2b, 0xef, 0xe8, 0x35, 0xa3, 0x71, 0x88, 0xff, 0xdd, 0x0b,
	0x77, 0xfe, 0x88, 0xad, 0xc2, 0x74, 0x5e, 0xd1, 0xbc, 0x94, 0xd4, 0x6c, 0xa3, 0x92, 0x9c, 0x92,
	0x59, 0x05, 0x27, 0x5f, 0x33, 0x1a, 0xa7, 0x19, 0x26, 0x62, 0x22, 0x7c, 0x25, 0xd9, 0xb7, 0x63,
	0x1e, 0xc5, 0xca, 0x4e, 0x19, 0x98, 0x0f, 0x68, 0x83, 0x53, 0x0e, 0x7e, 0x97, 0x3d, 0x43, 0x44,
	0x98, 0x55, 0x94, 0x53, 0xed, 0xe1, 0x24, 0x56, 0x2c, 0x62, 0xc5, 0x2a, 0x56, 0x7c, 0x4d, 0x47,
	0xe3, 0xd6, 0xbe, 0x90, 0xff, 0xcc, 0x2b, 0x5b, 0x31, 0x04, 0x7e, 0xb3, 0x9a, 0x16, 0x57, 0x3d,
	0x43, 0x96, 0xf7, 0xb2, 0x2a, 0x3f, 0x21, 0x23, 0xd5, 0xd7, 0xdc, 0x44, 0xf9, 0x17, 0x12, 0xab,
	0x48, 0x04, 0x34, 0xcf, 0x51, 0x71, 0x02, 0xfe, 0x2b, 0xb1, 0x72, 0xb2, 0xa9, 0x93, 0xb1, 0x85,
	0x34, 0xf2, 0x12, 0x7a, 0x33, 0x77, 0xa9, 0xb7, 0x2e, 0xa6, 0x0b, 0x5b, 0x9f, 0x2d, 0x6c, 0xfd,
	0x6b, 0x61, 0xeb, 0x1f, 0x4b, 0x5b, 0x9b, 0x2d, 0x6d, 0xed, 0x73, 0x69, 0x6b, 0x8f, 0x07, 0xa9,
	0x43, 0xbd, 0xa7, 0xaf, 0xc6, 0xe3, 0x90, 0xb0, 0x5e, 0x49, 0x1e, 0xec, 0xec, 0x37, 0x00, 0x00,
	0xff, 0xff, 0x84, 0x94, 0xfa, 0x32, 0x77, 0x02, 0x00, 0x00,
}

func (m *PoolData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PoolData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PoolData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.TotalShares.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if len(m.Assets) > 0 {
		for k := range m.Assets {
			v := m.Assets[k]
			baseI := i
			{
				size, err := (&v).MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintPoolData(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintPoolData(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintPoolData(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x22
		}
	}
	{
		size, err := m.PoolParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPoolData(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.PoolId) > 0 {
		i -= len(m.PoolId)
		copy(dAtA[i:], m.PoolId)
		i = encodeVarintPoolData(dAtA, i, uint64(len(m.PoolId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintPoolData(dAtA []byte, offset int, v uint64) int {
	offset -= sovPoolData(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *PoolData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.PoolId)
	if l > 0 {
		n += 1 + l + sovPoolData(uint64(l))
	}
	l = m.PoolParams.Size()
	n += 1 + l + sovPoolData(uint64(l))
	if len(m.Assets) > 0 {
		for k, v := range m.Assets {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + len(k) + sovPoolData(uint64(len(k))) + 1 + l + sovPoolData(uint64(l))
			n += mapEntrySize + 1 + sovPoolData(uint64(mapEntrySize))
		}
	}
	l = m.TotalShares.Size()
	n += 1 + l + sovPoolData(uint64(l))
	return n
}

func sovPoolData(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPoolData(x uint64) (n int) {
	return sovPoolData(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PoolData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPoolData
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PoolData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PoolData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPoolData
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PoolId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PoolParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.PoolParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Assets == nil {
				m.Assets = make(map[string]PoolAsset)
			}
			var mapkey string
			mapvalue := &PoolAsset{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowPoolData
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoolData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthPoolData
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthPoolData
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowPoolData
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthPoolData
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return ErrInvalidLengthPoolData
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &PoolAsset{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipPoolData(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthPoolData
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Assets[mapkey] = *mapvalue
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalShares", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPoolData
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPoolData
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPoolData
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TotalShares.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPoolData(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPoolData
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPoolData(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPoolData
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPoolData
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPoolData
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPoolData
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPoolData
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPoolData        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPoolData          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPoolData = fmt.Errorf("proto: unexpected end of group")
)
